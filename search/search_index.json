{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"ignition_vs_gazebo A collection of tests between gazebo and ignition. For a detailed analysis, see my article comparing ignition and gazebo . Quickstart All tests are located under the tests directory. Each test has a standalone script to launch the simulator. Simply run ./start_gazebo.sh or ./start_ign.sh to launch the test with the desired simulator. Test setup Tests are created using xacro . This ensures that the same properties are used in both simulators. The SDF also sets several GUI properties, which are not compatible between programs. A separate macro was created for each simulator and included in its respective test. Development Environment VSCode Container The test setup includes a VSCode container IDE, which pre-installs gazebo 11 and ignition citadel. If you're on a Linux system, the scripts will launch the respective simulation (including Gazebo GUI). Local If you wish to run the tests natively instead, you'll need to have Gazebo and Ignition installed. Gazebo 11 Ignition Citadel","title":"ignition_vs_gazebo"},{"location":"#ignition_vs_gazebo","text":"A collection of tests between gazebo and ignition. For a detailed analysis, see my article comparing ignition and gazebo .","title":"ignition_vs_gazebo"},{"location":"#quickstart","text":"All tests are located under the tests directory. Each test has a standalone script to launch the simulator. Simply run ./start_gazebo.sh or ./start_ign.sh to launch the test with the desired simulator.","title":"Quickstart"},{"location":"#test-setup","text":"Tests are created using xacro . This ensures that the same properties are used in both simulators. The SDF also sets several GUI properties, which are not compatible between programs. A separate macro was created for each simulator and included in its respective test.","title":"Test setup"},{"location":"#development-environment","text":"","title":"Development Environment"},{"location":"#vscode-container","text":"The test setup includes a VSCode container IDE, which pre-installs gazebo 11 and ignition citadel. If you're on a Linux system, the scripts will launch the respective simulation (including Gazebo GUI).","title":"VSCode Container"},{"location":"#local","text":"If you wish to run the tests natively instead, you'll need to have Gazebo and Ignition installed. Gazebo 11 Ignition Citadel","title":"Local"},{"location":"LICENSE/","text":"Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION Definitions. \"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. \"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. \"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. \"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License. \"Source\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. \"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. \"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). \"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. \"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\" \"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and (c) You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a \"NOTICE\" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS APPENDIX: How to apply the Apache License to your work. To apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets \"[]\" replaced with your own identifying information. (Don't include the brackets!) The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same \"printed page\" as the copyright notice for easier identification within third-party archives. Copyright [yyyy] [name of copyright owner] Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"LICENSE"},{"location":"bounce/","text":"Bounce Bounce is the rebound or reflection after striking a surface (such as the ground). In the simulation, this is defined by the restitution_coefficient parameter. To model bounce in Gazebo, you need to set 3 parameters in the SDF. restitution_coefficient [0,1] Where 0 is no bounce, and 1 is pure bounce threshold The penetration threshold needed to apply restitution force max_vel The maximum velocity that the restitution force can cause. A restitution_coefficient must be set on both collision surfaces. For balls to achieve infinite bounce with the ground in this simulation, the ground was given a restitution_coefficient=1 . Example code snippet <link> ... <collision> ... <surface> <bounce> <restitution_coefficient> 1 </restitution_coefficient> <threshold> 0 </threshold> </bounce> <friction> <ode/> </friction> <contact> <ode> <max_vel> 1000 </max_vel> </ode> </contact> </surface> </collision> </link> Comparison Gazebo | Ignition with restitution coefficient ranging from 1 to 0 in 0.1 increments. Ignition does not currently model bounce. Update Ignition now models bounce!","title":"Bounce"},{"location":"bounce/#bounce","text":"Bounce is the rebound or reflection after striking a surface (such as the ground). In the simulation, this is defined by the restitution_coefficient parameter. To model bounce in Gazebo, you need to set 3 parameters in the SDF. restitution_coefficient [0,1] Where 0 is no bounce, and 1 is pure bounce threshold The penetration threshold needed to apply restitution force max_vel The maximum velocity that the restitution force can cause. A restitution_coefficient must be set on both collision surfaces. For balls to achieve infinite bounce with the ground in this simulation, the ground was given a restitution_coefficient=1 .","title":"Bounce"},{"location":"bounce/#example-code-snippet","text":"<link> ... <collision> ... <surface> <bounce> <restitution_coefficient> 1 </restitution_coefficient> <threshold> 0 </threshold> </bounce> <friction> <ode/> </friction> <contact> <ode> <max_vel> 1000 </max_vel> </ode> </contact> </surface> </collision> </link>","title":"Example code snippet"},{"location":"bounce/#comparison","text":"Gazebo | Ignition with restitution coefficient ranging from 1 to 0 in 0.1 increments. Ignition does not currently model bounce. Update Ignition now models bounce!","title":"Comparison"},{"location":"friction/","text":"Friction Friction is the resistance to motion of one object moving relative to another. There are several different types of friction that you can model. Here we are modeling kinetic friction by setting the coefficient of friction. The coefficient of friction in version 1.7 of the sdformat is modeled as an ODE parameter with mu as the coefficient for the first friction direction and mu2 as the coefficient for the second friction direction. There is an additional parameter, `fdir1 that can specify a specific primary friction direction relative to the link, otherwise it is modeled relative to the world. These two directions get modeled together using a simplified friction pyramid model. Example code snippet <link> ... <collision name= \"${name}_collision\" > ... <surface> <friction> <ode> <mu> 1 </mu> <mu2> 1 </mu2> <fdir1> 1 0 0 </fdir1> </ode> </friction> </surface> </collision> </link> Comparison From left to right: Cube1 Default friction. sdformat states that if no friction is set, mu1 and mu2 are set to 1 (high friction). Therefore, this cube shouldn't move. Cube2 mu=1 , mu2=0 . The ramp is pointed down the X axis. Therefore, I expect that with a high mu along that axis, the cube will not move Cube3 mu=0 , mu2=1 . The ramp is pointed down the X axis. Therefore, I expect that with no friction along this direction, the cube will move down the ramp. Cube4 mu=1 , mu2=0 , fdir1=1 0 0 (pointed down the ramp). Since the mu value is aligned with the ramp, I expect the block to stay still. Cube5 mu=1 , mu2=0 , fdir1=0 1 0 (pointed toward the sides of the ramp). Since the mu value is perpendicular to the ramp, I expect the block to move. Cube6 mu=1 , mu2=0 , fdir1=0 0 1 (pointed up). Since the mu value is perpendicular to the ramp, I expect the block to move. Cube7 Cube4, rotated along the Y-axis Since the mu value is rotated to be perpendicular to the ramp, I expect the block to move. Cube8 mu=1 rotated along the X-axis. Since only setting mu should set both values, I expect the result to be rotation agnostic and remain stationary. Cube9 mu=1 rotated along the X and Y-axis. Since only setting mu should set both values, I expect the result to be rotation agnostic and remain stationary. Notably, neither behaved quite how I was expecting. In Gazebo, the mu and mu2 arguments acted on the opposite axis as I expected, with the world y frame corresponding to mu and the world x frame corresponding to mu2. In Ignition, the mu and mu2 arguments act on the axis that I expected, with x corresponding to mu and y corresponding to mu2. However, setting the fdir1 direction to orientations perpendicular to the ramp direction incorrectly makes the box remain stationary on the ramp.","title":"Friction"},{"location":"friction/#friction","text":"Friction is the resistance to motion of one object moving relative to another. There are several different types of friction that you can model. Here we are modeling kinetic friction by setting the coefficient of friction. The coefficient of friction in version 1.7 of the sdformat is modeled as an ODE parameter with mu as the coefficient for the first friction direction and mu2 as the coefficient for the second friction direction. There is an additional parameter, `fdir1 that can specify a specific primary friction direction relative to the link, otherwise it is modeled relative to the world. These two directions get modeled together using a simplified friction pyramid model.","title":"Friction"},{"location":"friction/#example-code-snippet","text":"<link> ... <collision name= \"${name}_collision\" > ... <surface> <friction> <ode> <mu> 1 </mu> <mu2> 1 </mu2> <fdir1> 1 0 0 </fdir1> </ode> </friction> </surface> </collision> </link>","title":"Example code snippet"},{"location":"friction/#comparison","text":"From left to right: Cube1 Default friction. sdformat states that if no friction is set, mu1 and mu2 are set to 1 (high friction). Therefore, this cube shouldn't move. Cube2 mu=1 , mu2=0 . The ramp is pointed down the X axis. Therefore, I expect that with a high mu along that axis, the cube will not move Cube3 mu=0 , mu2=1 . The ramp is pointed down the X axis. Therefore, I expect that with no friction along this direction, the cube will move down the ramp. Cube4 mu=1 , mu2=0 , fdir1=1 0 0 (pointed down the ramp). Since the mu value is aligned with the ramp, I expect the block to stay still. Cube5 mu=1 , mu2=0 , fdir1=0 1 0 (pointed toward the sides of the ramp). Since the mu value is perpendicular to the ramp, I expect the block to move. Cube6 mu=1 , mu2=0 , fdir1=0 0 1 (pointed up). Since the mu value is perpendicular to the ramp, I expect the block to move. Cube7 Cube4, rotated along the Y-axis Since the mu value is rotated to be perpendicular to the ramp, I expect the block to move. Cube8 mu=1 rotated along the X-axis. Since only setting mu should set both values, I expect the result to be rotation agnostic and remain stationary. Cube9 mu=1 rotated along the X and Y-axis. Since only setting mu should set both values, I expect the result to be rotation agnostic and remain stationary. Notably, neither behaved quite how I was expecting. In Gazebo, the mu and mu2 arguments acted on the opposite axis as I expected, with the world y frame corresponding to mu and the world x frame corresponding to mu2. In Ignition, the mu and mu2 arguments act on the axis that I expected, with x corresponding to mu and y corresponding to mu2. However, setting the fdir1 direction to orientations perpendicular to the ramp direction incorrectly makes the box remain stationary on the ramp.","title":"Comparison"},{"location":"friction-pyramid/","text":"Friction Pyramid Both Gazebo and Ignition use a friction pyramid approximation. During tests of friction , I noticed that Gazebo and Ignition set the values differently in x and y when using the default world frame. This difference is visualized below by the differences in shape produced from the same simulation description file. Notably, the ignition simulation produces much smoother results, but it comes at a cost to the real-time factor.","title":"Friction Pyramid"},{"location":"friction-pyramid/#friction-pyramid","text":"Both Gazebo and Ignition use a friction pyramid approximation. During tests of friction , I noticed that Gazebo and Ignition set the values differently in x and y when using the default world frame. This difference is visualized below by the differences in shape produced from the same simulation description file. Notably, the ignition simulation produces much smoother results, but it comes at a cost to the real-time factor.","title":"Friction Pyramid"},{"location":"inertia/","text":"Inertia Inertia is the resistance of any physical object to any change in its velocity. An important element in simulation, inertia allows the physics simulator to calculate the correct dynamics of an object. From left to right: cube, solid sphere, hollow sphere, solid cylinder, hollow cylinder. All shapes have the same mass and friction. The friction causes the cube to stay in place while the cylinders roll down the ramp as expected. Here, both Ignition and Gazebo work as expected.","title":"Inertia"},{"location":"inertia/#inertia","text":"Inertia is the resistance of any physical object to any change in its velocity. An important element in simulation, inertia allows the physics simulator to calculate the correct dynamics of an object. From left to right: cube, solid sphere, hollow sphere, solid cylinder, hollow cylinder. All shapes have the same mass and friction. The friction causes the cube to stay in place while the cylinders roll down the ramp as expected. Here, both Ignition and Gazebo work as expected.","title":"Inertia"},{"location":"joint-damping/","text":"Joint Damping Joint damping reduces a force based on how fast an object is moving. The force balance equation: \\[ F=m\\ddot{x}+b\\dot{x}+kx \\] where \\(F\\) is an applied force, x is position, \\(\\dot{x}\\) is velocity, and \\(\\ddot{x}\\) is acceleration. \\(m\\) is mass, \\(k\\) is a spring constant, and \\(b\\) is a viscous damping term. When you plot applied torque versus speed for the unloaded system, the damping (viscous losses) will be the slope. Example code snippet <!-- Damping --> <joint name= \"wheel_joint\" type= \"revolute\" > <parent> wheel_support </parent> <child> wheel </child> <pose relative_to= \"wheel_support\" > 0 0 0 0 0 0 </pose> <axis> <xyz> 0 0 1 </xyz> <dynamics> <damping> 1 </damping> <friction> 0 </friction> </dynamics> <limit> <lower> -1e+16 </lower> <upper> 1e+16 </upper> </limit> </axis> </joint> Comparison color damping green 0 teal 0.5 blue 1 pink 1.5 red 2","title":"Joint Damping"},{"location":"joint-damping/#joint-damping","text":"Joint damping reduces a force based on how fast an object is moving. The force balance equation: \\[ F=m\\ddot{x}+b\\dot{x}+kx \\] where \\(F\\) is an applied force, x is position, \\(\\dot{x}\\) is velocity, and \\(\\ddot{x}\\) is acceleration. \\(m\\) is mass, \\(k\\) is a spring constant, and \\(b\\) is a viscous damping term. When you plot applied torque versus speed for the unloaded system, the damping (viscous losses) will be the slope.","title":"Joint Damping"},{"location":"joint-damping/#example-code-snippet","text":"<!-- Damping --> <joint name= \"wheel_joint\" type= \"revolute\" > <parent> wheel_support </parent> <child> wheel </child> <pose relative_to= \"wheel_support\" > 0 0 0 0 0 0 </pose> <axis> <xyz> 0 0 1 </xyz> <dynamics> <damping> 1 </damping> <friction> 0 </friction> </dynamics> <limit> <lower> -1e+16 </lower> <upper> 1e+16 </upper> </limit> </axis> </joint>","title":"Example code snippet"},{"location":"joint-damping/#comparison","text":"color damping green 0 teal 0.5 blue 1 pink 1.5 red 2","title":"Comparison"},{"location":"joint-friction/","text":"Joint Friction Joint friction reduces a force based on how heavy an object is. The force balance equation: \\[ F=m\\ddot{x}+b\\dot{x}+kx \\] where \\(F\\) is an applied force, x is position, \\(\\dot{x}\\) is velocity, and \\(\\ddot{x}\\) is acceleration. \\(m\\) is mass, \\(k\\) is a spring constant, and \\(b\\) is a viscous damping term. When you plot applied torque versus speed for the unloaded system, the friction losses will be the y-intercept. Example code snippet <!-- Damping --> <joint name= \"wheel_joint\" type= \"revolute\" > <parent> wheel_support </parent> <child> wheel </child> <pose relative_to= \"wheel_support\" > 0 0 0 0 0 0 </pose> <axis> <xyz> 0 0 1 </xyz> <dynamics> <damping> 0 </damping> <friction> 1 </friction> </dynamics> <limit> <lower> -1e+16 </lower> <upper> 1e+16 </upper> </limit> </axis> </joint> Comparison color friction green 0 teal 1 blue 10 pink 100 red 1000","title":"Joint Friction"},{"location":"joint-friction/#joint-friction","text":"Joint friction reduces a force based on how heavy an object is. The force balance equation: \\[ F=m\\ddot{x}+b\\dot{x}+kx \\] where \\(F\\) is an applied force, x is position, \\(\\dot{x}\\) is velocity, and \\(\\ddot{x}\\) is acceleration. \\(m\\) is mass, \\(k\\) is a spring constant, and \\(b\\) is a viscous damping term. When you plot applied torque versus speed for the unloaded system, the friction losses will be the y-intercept.","title":"Joint Friction"},{"location":"joint-friction/#example-code-snippet","text":"<!-- Damping --> <joint name= \"wheel_joint\" type= \"revolute\" > <parent> wheel_support </parent> <child> wheel </child> <pose relative_to= \"wheel_support\" > 0 0 0 0 0 0 </pose> <axis> <xyz> 0 0 1 </xyz> <dynamics> <damping> 0 </damping> <friction> 1 </friction> </dynamics> <limit> <lower> -1e+16 </lower> <upper> 1e+16 </upper> </limit> </axis> </joint>","title":"Example code snippet"},{"location":"joint-friction/#comparison","text":"color friction green 0 teal 1 blue 10 pink 100 red 1000","title":"Comparison"},{"location":"joint-spring/","text":"Joint Spring Constant The joint spring constant defines how much force the spring exerts per unit of distance from the spring's equilibrium state (the state where it is neither compressed nor stretched). The force balance equation: \\[ F=m\\ddot{x}+b\\dot{x}+kx \\] where \\(F\\) is an applied force, x is position, \\(\\dot{x}\\) is velocity, and \\(\\ddot{x}\\) is acceleration. \\(m\\) is mass, \\(k\\) is a spring constant, and \\(b\\) is a viscous damping term. Example code snippet I've set the damping to 10 so that the effect of spring force restitution is more readily apparent. <joint name= \"joint\" type= \"revolute\" > <parent> world </parent> <child> rod </child> <pose relative_to= \"base_link\" > 0 0 0 0 0 0 </pose> <axis> <xyz> 1 0 0 </xyz> <dynamics> <damping> 10 </damping> <spring_reference> -0.785398163397 </spring_reference> <spring_stiffness> 10.0 </spring_stiffness> </dynamics> <limit> <lower> -1e+16 </lower> <upper> 1e+16 </upper> </limit> </axis> </joint> Comparison color spring constant green 0 teal 1 blue 10 pink 100 red 1000","title":"Joint Spring Constant"},{"location":"joint-spring/#joint-spring-constant","text":"The joint spring constant defines how much force the spring exerts per unit of distance from the spring's equilibrium state (the state where it is neither compressed nor stretched). The force balance equation: \\[ F=m\\ddot{x}+b\\dot{x}+kx \\] where \\(F\\) is an applied force, x is position, \\(\\dot{x}\\) is velocity, and \\(\\ddot{x}\\) is acceleration. \\(m\\) is mass, \\(k\\) is a spring constant, and \\(b\\) is a viscous damping term.","title":"Joint Spring Constant"},{"location":"joint-spring/#example-code-snippet","text":"I've set the damping to 10 so that the effect of spring force restitution is more readily apparent. <joint name= \"joint\" type= \"revolute\" > <parent> world </parent> <child> rod </child> <pose relative_to= \"base_link\" > 0 0 0 0 0 0 </pose> <axis> <xyz> 1 0 0 </xyz> <dynamics> <damping> 10 </damping> <spring_reference> -0.785398163397 </spring_reference> <spring_stiffness> 10.0 </spring_stiffness> </dynamics> <limit> <lower> -1e+16 </lower> <upper> 1e+16 </upper> </limit> </axis> </joint>","title":"Example code snippet"},{"location":"joint-spring/#comparison","text":"color spring constant green 0 teal 1 blue 10 pink 100 red 1000","title":"Comparison"},{"location":"wheel/","text":"Wheel Joints Let's see what joint damping , joint friction and joint spring constant act on wheels. Comparison color friction yellow No dynamics teal Damping pink Friction green Spring constant","title":"Wheel Joints"},{"location":"wheel/#wheel-joints","text":"Let's see what joint damping , joint friction and joint spring constant act on wheels.","title":"Wheel Joints"},{"location":"wheel/#comparison","text":"color friction yellow No dynamics teal Damping pink Friction green Spring constant","title":"Comparison"},{"location":"wheel-drift/","text":"Wheel drift Almost all robot configurations will cause the simulator to have numerical integration errors. Example errors from simple two-wheel robots. Example errors from simple four-wheel robots","title":"Wheel drift"},{"location":"wheel-drift/#wheel-drift","text":"Almost all robot configurations will cause the simulator to have numerical integration errors. Example errors from simple two-wheel robots. Example errors from simple four-wheel robots","title":"Wheel drift"}]}