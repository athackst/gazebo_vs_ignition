{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"ignition_vs_gazebo A collection of tests between gazebo and ignition. For a detailed analysis, see my artical comparing ignition and gazebo . Quickstart All tests are located under the tests directory. Each test has a standalone script to launch the simulator. Simply run ./start_gazebo.sh or ./start_ign.sh to launch the test with the desired simulator. Test setup Tests are created using xacro . This ensures that the same properties are used in both simulators. The SDF also sets several GUI properties, which are not compatible between programs. A separate macro was created for each simulator and included in its respective test. Development Environment VSCode Container The test setup includes a VSCode container IDE, which pre-installs gazebo 11 and ignition citadel. If you're on a Linux system, the scripts will launch the respective simulation (including Gazebo GUI). Local If you wish to run the tests natively instead, you'll need to have Gazebo and Ignition installed. Gazebo 11 Ignition Citadel","title":"ignition_vs_gazebo"},{"location":"#ignition_vs_gazebo","text":"A collection of tests between gazebo and ignition. For a detailed analysis, see my artical comparing ignition and gazebo .","title":"ignition_vs_gazebo"},{"location":"#quickstart","text":"All tests are located under the tests directory. Each test has a standalone script to launch the simulator. Simply run ./start_gazebo.sh or ./start_ign.sh to launch the test with the desired simulator.","title":"Quickstart"},{"location":"#test-setup","text":"Tests are created using xacro . This ensures that the same properties are used in both simulators. The SDF also sets several GUI properties, which are not compatible between programs. A separate macro was created for each simulator and included in its respective test.","title":"Test setup"},{"location":"#development-environment","text":"","title":"Development Environment"},{"location":"#vscode-container","text":"The test setup includes a VSCode container IDE, which pre-installs gazebo 11 and ignition citadel. If you're on a Linux system, the scripts will launch the respective simulation (including Gazebo GUI).","title":"VSCode Container"},{"location":"#local","text":"If you wish to run the tests natively instead, you'll need to have Gazebo and Ignition installed. Gazebo 11 Ignition Citadel","title":"Local"},{"location":"tests/bounce/","text":"bounce Bounce is the rebound or reflection after striking a surface (such as the ground). In the simulation, this is represented by the restitution_coefficient . To model bounce in Gazebo, you need to set 3 parameters in the SDF. restitution_coefficient [0,1] Where 0 is no bounce, and 1 is pure bounce threshold The penetration threshold needed to apply restitution force max_vel The maximum velocity that the restitution force can cause. A restitution_coefficient must be set on both collision surfaces. For balls to achieve infinite bounce with the ground in this simulation, the ground was given a restitution_coefficient=1 Example code snippet <link> ... <collision> ... <surface> <bounce> <restitution_coefficient> 1 </restitution_coefficient> <threshold> 0 </threshold> </bounce> <friction> <ode/> </friction> <contact> <ode> <max_vel> 1000 </max_vel> </ode> </contact> </surface> </collision> </link> Comparison Gazebo | Ignition with restitution coefficient ranging from 1 to 0 in 0.1 increments. Ignition does not currently model bounce.","title":"bounce"},{"location":"tests/bounce/#bounce","text":"Bounce is the rebound or reflection after striking a surface (such as the ground). In the simulation, this is represented by the restitution_coefficient . To model bounce in Gazebo, you need to set 3 parameters in the SDF. restitution_coefficient [0,1] Where 0 is no bounce, and 1 is pure bounce threshold The penetration threshold needed to apply restitution force max_vel The maximum velocity that the restitution force can cause. A restitution_coefficient must be set on both collision surfaces. For balls to achieve infinite bounce with the ground in this simulation, the ground was given a restitution_coefficient=1","title":"bounce"},{"location":"tests/bounce/#example-code-snippet","text":"<link> ... <collision> ... <surface> <bounce> <restitution_coefficient> 1 </restitution_coefficient> <threshold> 0 </threshold> </bounce> <friction> <ode/> </friction> <contact> <ode> <max_vel> 1000 </max_vel> </ode> </contact> </surface> </collision> </link>","title":"Example code snippet"},{"location":"tests/bounce/#comparison","text":"Gazebo | Ignition with restitution coefficient ranging from 1 to 0 in 0.1 increments. Ignition does not currently model bounce.","title":"Comparison"}]}